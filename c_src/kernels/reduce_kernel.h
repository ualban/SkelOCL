static std::string ReduceKernelStr(
"__kernel void ReduceKernel(__global TYPE* input, __global TYPE* output, unsigned int n, __local TYPE* localData) {\n"
"   unsigned int blockSize = get_local_size(0);\n"
"   unsigned int tid = get_local_id(0);\n"
"   unsigned int i = get_global_id(0);\n"
"   unsigned int gridSize = blockSize * get_num_groups(0);\n"
"   TYPE result = 0;\n"
"   if(i < n) {\n"
"       result = input[i];\n"
"       i += gridSize;\n"
"   }\n"
"   while(i < n) {\n"
"       result = FUN_NAME(result, input[i]);\n"
"       i += gridSize;\n"
"   }\n"
"   localData[tid] = result;\n"
"   barrier(CLK_LOCAL_MEM_FENCE);\n"
"   //unrolled loop\n"
"   if(blockSize >= 512) { if (tid < 256 && tid + 256 < n) { localData[tid] = FUN_NAME(localData[tid], localData[tid + 256]); } barrier(CLK_LOCAL_MEM_FENCE); }\n"
"   if(blockSize >= 256) { if (tid < 128 && tid + 128 < n) { localData[tid] = FUN_NAME(localData[tid], localData[tid + 128]); } barrier(CLK_LOCAL_MEM_FENCE); }\n"
"   if(blockSize >= 128) { if (tid <  64 && tid +  64 < n) { localData[tid] = FUN_NAME(localData[tid], localData[tid +  64]); } barrier(CLK_LOCAL_MEM_FENCE); }\n"
"   if(blockSize >=  64) { if (tid <  32 && tid +  32 < n) { localData[tid] = FUN_NAME(localData[tid], localData[tid +  32]); } barrier(CLK_LOCAL_MEM_FENCE); }\n"
"   if(blockSize >=  32) { if (tid <  16 && tid +  16 < n) { localData[tid] = FUN_NAME(localData[tid], localData[tid +  16]); } barrier(CLK_LOCAL_MEM_FENCE); }\n"
"   if(blockSize >=  16) { if (tid <   8 && tid +   8 < n) { localData[tid] = FUN_NAME(localData[tid], localData[tid +   8]); } barrier(CLK_LOCAL_MEM_FENCE); }\n"
"   if(blockSize >=   8) { if (tid <   4 && tid +   4 < n) { localData[tid] = FUN_NAME(localData[tid], localData[tid +   4]); } barrier(CLK_LOCAL_MEM_FENCE); }\n"
"   if(blockSize >=   4) { if (tid <   2 && tid +   2 < n) { localData[tid] = FUN_NAME(localData[tid], localData[tid +   2]); } barrier(CLK_LOCAL_MEM_FENCE); }\n"
"   if(blockSize >=   2) { if (tid <   1 && tid +   1 < n) { localData[tid] = FUN_NAME(localData[tid], localData[tid +   1]); } barrier(CLK_LOCAL_MEM_FENCE); }\n"
"   if(tid == 0)	output[get_group_id(0)] = localData[tid];\n"
"}\n"
);
